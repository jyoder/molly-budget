"use strict";
exports.__esModule = true;
/*
 * Firebase Rules test simulator.
 *
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var chai_1 = require("chai");
var rest = require("./firebase-rest");
var util = require("./util");
var fileIO = require("./file-io");
var bolt = require("./bolt");
var generate = util.lift(bolt.generate);
var readFile = util.liftArgs(fileIO.readFile);
var MAX_TEST_MS = 60000;
;
function rulesSuite(suiteName, fnSuite) {
    new RulesSuite(suiteName, fnSuite).run();
}
exports.rulesSuite = rulesSuite;
var RulesSuite = /** @class */ (function () {
    function RulesSuite(suiteName, fnSuite) {
        this.suiteName = suiteName;
        this.fnSuite = fnSuite;
        this.debug = false;
        this.users = {};
        this.tests = [];
    }
    RulesSuite.prototype.setDebug = function (debug) {
        if (debug === void 0) { debug = true; }
        this.debug = debug;
        return this;
    };
    RulesSuite.prototype.run = function () {
        var self = this;
        // Run Mocha Test Suite - serialize with any other mocha test suites.
        suite("Firebase Rules Simulator: " + self.suiteName, function () {
            this.timeout(MAX_TEST_MS);
            suiteSetup(function () {
                var rulesPath = new Promise(function (resolve) {
                    self.rulesPathResolve = resolve;
                });
                var database = new Promise(function (resolve) {
                    self.databaseReady = resolve;
                });
                var rulesJSON = generate(util.getProp(readFile(rulesPath), 'content'));
                self.ready = Promise.all([rulesJSON, database])
                    .then(self.onRulesReady.bind(self));
                // Execute initialization and get test definitions (in client code).
                self.fnSuite(self.getInterface());
                return self.ready;
            });
            test("Initialization.", function () {
                // pass
            });
            test("Rules test.", function () {
                return self.runTests();
            });
        });
    };
    RulesSuite.prototype.getInterface = function () {
        var test = this.test.bind(this);
        test.rules = this.rules.bind(this);
        test.database = this.database.bind(this);
        test.uid = this.uid.bind(this);
        test.TIMESTAMP = rest.TIMESTAMP;
        return test;
    };
    // Called when rules are generated and test database is known.
    RulesSuite.prototype.onRulesReady = function (prereq) {
        var rulesJSON = prereq[0];
        return this.adminClient.put(rest.RULES_LOCATION, rulesJSON);
    };
    RulesSuite.prototype.runTests = function () {
        var p = Promise.resolve();
        function next(prev, test) {
            return prev.then(function () {
                return test.run();
            });
        }
        for (var i = 0; i < this.tests.length; i++) {
            p = next(p, this.tests[i]);
        }
        return p;
    };
    RulesSuite.prototype.test = function (testName, fnTest) {
        this.tests.push(new RulesTest(testName, this, fnTest));
    };
    RulesSuite.prototype.rules = function (rulesPath) {
        if (this.rulesPath) {
            throw new Error("Only expect a single call to the test.rules function.");
        }
        this.rulesPath = rulesPath;
        this.rulesPathResolve(util.ensureExtension(rulesPath, bolt.FILE_EXTENSION));
    };
    RulesSuite.prototype.database = function (appName, appSecret) {
        if (this.adminClient) {
            throw new Error("Only expect a single call to the test.database function.");
        }
        this.appName = appName;
        this.appSecret = appSecret;
        this.adminClient = this.ensureUser('admin');
        this.databaseReady();
    };
    RulesSuite.prototype.uid = function (username) {
        return this.ensureUser(username).uid;
    };
    RulesSuite.prototype.ensureUser = function (username) {
        if (!(username in this.users)) {
            if (username === 'anon') {
                this.users[username] = new rest.Client(this.appName);
            }
            else {
                var tokenInfo = rest.generateUidAuthToken(this.appSecret, { debug: true,
                    admin: username === 'admin' });
                this.users[username] = new rest.Client(this.appName, tokenInfo.token, tokenInfo.uid);
            }
        }
        return this.users[username];
    };
    return RulesSuite;
}());
exports.RulesSuite = RulesSuite;
var RulesTest = /** @class */ (function () {
    function RulesTest(testName, suite, fnTest) {
        this.testName = testName;
        this.suite = suite;
        this.fnTest = fnTest;
        this.steps = [];
        this.failed = false;
    }
    RulesTest.prototype.run = function () {
        var _this = this;
        this.debug(false);
        this.as('admin');
        this.at('/');
        this.write(null);
        this.succeeds("initialization");
        this.at(undefined);
        this.as('anon');
        this.fnTest(this);
        this.debug(false);
        return this.executeQueue()
            .then(function () {
            _this.log("Finished");
        })["catch"](function (error) {
            _this.log("Failed: " + error);
            throw error;
        });
    };
    // Queue a function to be called in sequence after previous step
    // in test is (successfully) completed.
    RulesTest.prototype.queue = function (op, args, fn) {
        if (this.failed) {
            return;
        }
        var argsT = util.copyArray(args).map(function (x) {
            return util.prettyJSON(x);
        });
        var label = op + '(' + argsT.join(', ') + ')';
        this.steps.push({ label: label, fn: fn });
    };
    RulesTest.prototype.executeQueue = function () {
        var self = this;
        this.log("Executing (" + this.steps.length + " steps)");
        var p = Promise.resolve(true);
        function next(prev, step) {
            return prev.then(function () {
                self.log(step.label);
                return step.fn();
            });
        }
        for (var i = 0; i < this.steps.length; i++) {
            p = next(p, this.steps[i]);
        }
        return p;
    };
    RulesTest.prototype.debug = function (debug) {
        var _this = this;
        this.suite.setDebug(debug);
        this.queue('debug', arguments, function () {
            _this.suite.setDebug(debug);
            return Promise.resolve();
        });
        return this;
    };
    RulesTest.prototype.as = function (username) {
        var _this = this;
        var client = this.suite.ensureUser(username);
        this.queue('as', arguments, function () {
            client.setDebug(_this.suite.debug);
            _this.client = client;
            return Promise.resolve();
        });
        return this;
    };
    RulesTest.prototype.at = function (opPath) {
        var _this = this;
        this.queue('at', arguments, function () {
            _this.path = opPath;
            return Promise.resolve();
        });
        return this;
    };
    RulesTest.prototype.write = function (obj) {
        var _this = this;
        this.queue('write', arguments, function () {
            if (_this.path === undefined) {
                return Promise.reject(new Error("Use at() function to set path to write."));
            }
            return _this.client.put(_this.path, obj)
                .then(function () {
                _this.status = true;
            })["catch"](function (error) {
                _this.status = false;
                _this.lastError = error;
            });
        });
        return this;
    };
    RulesTest.prototype.push = function (obj) {
        var _this = this;
        this.queue('write', arguments, function () {
            if (_this.path === undefined) {
                return Promise.reject(new Error("Use at() function to set path to push."));
            }
            var path = _this.path;
            if (path.slice(-1)[0] !== '/') {
                path += '/';
            }
            path += rest.generatePushID();
            return _this.client.put(path, obj)
                .then(function () {
                _this.status = true;
            })["catch"](function (error) {
                _this.status = false;
                _this.lastError = error;
            });
        });
        return this;
    };
    RulesTest.prototype.read = function () {
        var _this = this;
        this.queue('read', arguments, function () {
            if (_this.path === undefined) {
                return Promise.reject(new Error("Use at() function to set path to read."));
            }
            return _this.client.get(_this.path)
                .then(function () {
                _this.status = true;
            })["catch"](function (error) {
                _this.status = false;
                _this.lastError = error;
            });
        });
        return this;
    };
    RulesTest.prototype.succeeds = function (message) {
        var _this = this;
        this.queue('succeeds', arguments, function () {
            chai_1.assert(_this.status === true, _this.messageFormat(message + " (should have succeed)\n" + _this.lastError));
            _this.good(message);
            _this.status = undefined;
            return Promise.resolve();
        });
        return this;
    };
    RulesTest.prototype.fails = function (message) {
        var _this = this;
        this.queue('fails', arguments, function () {
            chai_1.assert(_this.status === false, _this.messageFormat(message + " (should have failed)"));
            _this.good(message);
            _this.status = undefined;
            return Promise.resolve();
        });
        return this;
    };
    RulesTest.prototype.good = function (message) {
        this.log(message + " (Correct)");
    };
    RulesTest.prototype.log = function (message) {
        if (this.suite.debug) {
            console.log(this.messageFormat(message));
        }
    };
    RulesTest.prototype.messageFormat = function (message) {
        return this.suite.suiteName + "." + this.testName + " " + message;
    };
    return RulesTest;
}());
exports.RulesTest = RulesTest;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
