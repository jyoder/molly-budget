"use strict";
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var rest = require('../firebase-rest');
var secrets = require('../../auth-secrets');
var chai_1 = require('chai');
var TEST_LOCATION = '/rest-test';
suite("Firebase REST Tests", function () {
    var client = new rest.Client(secrets.APP);
    suiteSetup(function () {
        var adminClient = new rest.Client(secrets.APP, secrets.SECRET);
        return adminClient.put(rest.RULES_LOCATION, {
            rules: {
                ".read": true,
                ".write": false,
                "rest-test": {
                    ".write": true
                }
            }
        });
    });
    test("Read location", function () {
        return client.get(TEST_LOCATION);
    });
    test("Write data", function () {
        var tests = [
            { location: 'string', value: 'Hello, world.' },
            { location: 'integer', value: 123 },
            { location: 'number', value: 123.456 },
            { location: 'boolean', value: false },
            { location: 'object', value: { this: 1, that: 'other' } },
            { location: 'TIMESTAMP', value: rest.TIMESTAMP },
        ];
        var results = [];
        for (var i = 0; i < tests.length; i++) {
            var t = tests[i];
            results.push(client.put(TEST_LOCATION + '/types/' + t.location, t.value));
        }
        return Promise.all(results);
    });
    test("Invalid location", function () {
        return client.get('../../illegal')
            .catch(function (error) {
            return true;
        });
    });
    test("PushID", function () {
        var id1 = rest.generatePushID();
        var id2 = rest.generatePushID();
        chai_1.assert.equal(id1.length, 20);
        chai_1.assert.notEqual(id1, id2);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZmlyZWJhc2UtcmVzdC10ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILElBQVksSUFBSSxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFDekMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDNUMscUJBQXFCLE1BQU0sQ0FBQyxDQUFBO0FBRTVCLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztBQUVqQyxLQUFLLENBQUMscUJBQXFCLEVBQUU7SUFDM0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUxQyxVQUFVLENBQUM7UUFDVCxJQUFJLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ3BCLElBQUksQ0FBQyxjQUFjLEVBQ25CO1lBQ0UsS0FBSyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFFBQVEsRUFBRSxLQUFLO2dCQUNmLFdBQVcsRUFBRTtvQkFDWCxRQUFRLEVBQUUsSUFBSTtpQkFDZjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNqQixJQUFJLEtBQUssR0FBRztZQUNWLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFO1lBQzlDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ25DLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO1lBQ3RDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQ3JDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsRUFBRTtZQUN2RCxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7U0FDakQsQ0FBQztRQUNGLElBQUksT0FBTyxHQUFzQixFQUFFLENBQUM7UUFDcEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUUsQ0FBQztRQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQzthQUMvQixLQUFLLENBQUMsVUFBUyxLQUFLO1lBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDaEMsYUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLGFBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9maXJlYmFzZS1yZXN0LXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHJlc3QgZnJvbSAnLi4vZmlyZWJhc2UtcmVzdCc7XG5sZXQgc2VjcmV0cyA9IHJlcXVpcmUoJy4uLy4uL2F1dGgtc2VjcmV0cycpO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuXG5sZXQgVEVTVF9MT0NBVElPTiA9ICcvcmVzdC10ZXN0Jztcblxuc3VpdGUoXCJGaXJlYmFzZSBSRVNUIFRlc3RzXCIsIGZ1bmN0aW9uKCkge1xuICB2YXIgY2xpZW50ID0gbmV3IHJlc3QuQ2xpZW50KHNlY3JldHMuQVBQKTtcblxuICBzdWl0ZVNldHVwKGZ1bmN0aW9uKCkge1xuICAgIHZhciBhZG1pbkNsaWVudCA9IG5ldyByZXN0LkNsaWVudChzZWNyZXRzLkFQUCwgc2VjcmV0cy5TRUNSRVQpO1xuICAgIHJldHVybiBhZG1pbkNsaWVudC5wdXQoXG4gICAgICByZXN0LlJVTEVTX0xPQ0FUSU9OLFxuICAgICAge1xuICAgICAgICBydWxlczoge1xuICAgICAgICAgIFwiLnJlYWRcIjogdHJ1ZSxcbiAgICAgICAgICBcIi53cml0ZVwiOiBmYWxzZSxcbiAgICAgICAgICBcInJlc3QtdGVzdFwiOiB7XG4gICAgICAgICAgICBcIi53cml0ZVwiOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdChcIlJlYWQgbG9jYXRpb25cIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNsaWVudC5nZXQoVEVTVF9MT0NBVElPTik7XG4gIH0pO1xuXG4gIHRlc3QoXCJXcml0ZSBkYXRhXCIsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ZXN0cyA9IFtcbiAgICAgIHsgbG9jYXRpb246ICdzdHJpbmcnLCB2YWx1ZTogJ0hlbGxvLCB3b3JsZC4nIH0sXG4gICAgICB7IGxvY2F0aW9uOiAnaW50ZWdlcicsIHZhbHVlOiAxMjMgfSxcbiAgICAgIHsgbG9jYXRpb246ICdudW1iZXInLCB2YWx1ZTogMTIzLjQ1NiB9LFxuICAgICAgeyBsb2NhdGlvbjogJ2Jvb2xlYW4nLCB2YWx1ZTogZmFsc2UgfSxcbiAgICAgIHsgbG9jYXRpb246ICdvYmplY3QnLCB2YWx1ZToge3RoaXM6IDEsIHRoYXQ6ICdvdGhlcid9IH0sXG4gICAgICB7IGxvY2F0aW9uOiAnVElNRVNUQU1QJywgdmFsdWU6IHJlc3QuVElNRVNUQU1QIH0sXG4gICAgXTtcbiAgICB2YXIgcmVzdWx0cyA9IDxQcm9taXNlPHN0cmluZz5bXT5bXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHRlc3RzW2ldO1xuICAgICAgcmVzdWx0cy5wdXNoKGNsaWVudC5wdXQoVEVTVF9MT0NBVElPTiArICcvdHlwZXMvJyArIHQubG9jYXRpb24sIHQudmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xuICB9KTtcblxuICB0ZXN0KFwiSW52YWxpZCBsb2NhdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2xpZW50LmdldCgnLi4vLi4vaWxsZWdhbCcpXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdChcIlB1c2hJRFwiLCBmdW5jdGlvbigpIHtcbiAgICBsZXQgaWQxID0gcmVzdC5nZW5lcmF0ZVB1c2hJRCgpO1xuICAgIGxldCBpZDIgPSByZXN0LmdlbmVyYXRlUHVzaElEKCk7XG4gICAgYXNzZXJ0LmVxdWFsKGlkMS5sZW5ndGgsIDIwKTtcbiAgICBhc3NlcnQubm90RXF1YWwoaWQxLCBpZDIpO1xuICB9KTtcbn0pO1xuIl19
