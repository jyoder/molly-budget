"use strict";
exports.__esModule = true;
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var simulator_1 = require("../simulator");
var secrets = require('../../auth-secrets');
simulator_1.rulesSuite("Mail", function (test) {
    var uid = test.uid;
    test.database(secrets.APP, secrets.SECRET);
    test.rules('samples/mail');
    test("Inbox tests.", function (rules) {
        rules
            .as('tom')
            .at('/users/' + uid('bill') + '/inbox/1')
            .write({
            from: uid('tom'),
            to: uid('bill'),
            message: 'Hi, Bill!'
        })
            .succeeds("Normal write.")
            .write(null)
            .fails("Sender cannot delete sent message.")
            .write({
            from: uid('tom'),
            to: uid('bill'),
            message: 'Hello, again!'
        })
            .fails("Sender cannot overwrite.")
            .at('/users/' + uid('bill') + '/inbox/2')
            .write({
            from: uid('tom'),
            to: uid('bill'),
            message: 'Hi, Bill!',
            spurious: 'supurious data'
        })
            .fails("No undefined fields.")
            .write({
            from: uid('george'),
            to: uid('bill'),
            message: 'Hi, Bill!'
        })
            .fails("From field should be correct.")
            .at('/users/' + uid('bill') + '/inbox/1/message')
            .write("Bill gets my inheritance")
            .fails("Cannnot tamper with message.")
            .at('/users/' + uid('bill') + '/inbox/1/from')
            .write(uid('bill'))
            .fails("Cannot tamper with from field.")
            .as('bill')
            .at('/users/' + uid('bill') + '/inbox/1')
            .write(null)
            .succeeds("Receiver can delete received mail.");
    });
    test("Outbox tests.", function (rules) {
        rules
            .as('bill')
            .at('/users/' + uid('bill') + '/outbox/1')
            .write({
            from: uid('bill'),
            to: uid('tom'),
            message: "Hi, Tom!"
        })
            .succeeds("Normal write.")
            .as('tom')
            .write(null)
            .fails("Receiver cannot delete outbox message.")
            .as('bill')
            .at('/users/' + uid('bill') + '/outbox/1/message')
            .write("Bill gets my inheritance.")
            .fails("Sender cannot tamper with outbox message.")
            .at('/users/' + uid('bill') + '/outbox/1/from')
            .write('bill')
            .fails("Can't do a partial overwrite - even if same data.")
            .as('bill')
            .at('/users/' + uid('bill') + '/outbox/2')
            .write({
            from: 'joe',
            to: 'tom',
            message: "Hi, Tom!"
        })
            .fails("From field must be correct.")
            .write({
            from: 'bill',
            to: 'tom',
            message: "Hi, Tom!",
            spurious: "spurious"
        })
            .fails("No undefined fields.")
            .at('/users/' + uid('bill') + '/outbox/1')
            .write(null)
            .succeeds("Sender can delete sent mail in outbox.");
    });
    test("Read permissions.", function (rules) {
        rules
            .as('bill')
            .at('/users/' + uid('bill') + '/outbox/1')
            .write({
            from: uid('bill'),
            to: uid('tom'),
            message: 'Hi, Tom!'
        })
            .succeeds("Normal write.")
            .as('tom')
            .at('/users/' + uid('bill') + '/inbox/1')
            .write({
            from: uid('tom'),
            to: uid('bill'),
            message: 'Hi, Bill!'
        })
            .as('bill')
            .at('/users/' + uid('bill') + '/inbox/1')
            .read()
            .succeeds("Can read own inbox.")
            .at('/users/' + uid('bill') + '/outbox/1')
            .read()
            .succeeds("Can read own outbox.")
            .as('tom')
            .at('/users/' + uid('bill') + '/inbox/1')
            .read()
            .fails("Can't read Bill's inbox.")
            .at('/users/' + uid('bill') + '/outbox/1')
            .read()
            .fails("Can't read Bills outbox.");
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
