"use strict";
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var simulator_1 = require('../simulator');
var secrets = require('../../auth-secrets');
simulator_1.rulesSuite("Type[] | Scalar - issue 118", function (test) {
    test.database(secrets.APP, secrets.SECRET);
    test.rules('samples/issue-118');
    test("Scalar tests.", function (rules) {
        rules
            .as('mike')
            .at('/path/scalar')
            .write(1)
            .succeeds("Write to scalar.")
            .write(null)
            .succeeds("Deleting whole item can delete scalar.")
            .write(1)
            .at('/path/scalarOrNull')
            .write(1)
            .succeeds("Write to scalar or null.")
            .write(null)
            .succeeds("Can delete scalar or null.");
    });
    test("Array tests.", function (rules) {
        rules
            .as('mike')
            .at('/path/scalar')
            .write(1)
            .at('/path/array')
            .write([1])
            .succeeds("Write to array.")
            .write(null)
            .succeeds("Deleting whole array.")
            .at('/path/array/999')
            .write(1)
            .succeeds("Write single entry to array.")
            .at('/path/array')
            .push(2)
            .succeeds("Pushes value into array.")
            .write("bogus")
            .fails("Should not be able to write non-array to array.")
            .at('/path/arrayOrNull/999')
            .write(1)
            .succeeds("Can write single array entry to array or null.")
            .at('/path/arrayOrNull')
            .write([1])
            .succeeds("Write array to array or null.")
            .write(null)
            .succeeds("Can delete array or null.")
            .at('/path/arrayOrScalar')
            .write(1)
            .succeeds("Write scalar to array or scalar.")
            .write([1])
            .succeeds("Write array to array or scalar.");
    });
    test("Map tests.", function (rules) {
        rules
            .as('mike')
            .at('/path/scalar')
            .write(1)
            .at('/path/map')
            .write([1])
            .succeeds("Write to map.")
            .write(null)
            .succeeds("Deleting whole map.")
            .at('/path/map/key')
            .write(1)
            .succeeds("Write single entry to map.")
            .at('/path/map')
            .push(2)
            .succeeds("Pushes value into map.")
            .write("bogus")
            .fails("Should not be able to write non-map to map.")
            .at('/path/mapOrScalar')
            .write(1)
            .succeeds("Write scalar to map or scalar.")
            .write({ "key": 2 })
            .succeeds("Write map to map or scalar.");
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaXNzdWUtMTE4LXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsMEJBQXlCLGNBQWMsQ0FBQyxDQUFBO0FBQ3hDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBRTVDLHNCQUFVLENBQUMsNkJBQTZCLEVBQUUsVUFBUyxJQUFJO0lBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBRWhDLElBQUksQ0FBQyxlQUFlLEVBQUUsVUFBUyxLQUFLO1FBQ2xDLEtBQUs7YUFFRixFQUFFLENBQUMsTUFBTSxDQUFDO2FBQ1YsRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUNsQixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsUUFBUSxDQUFDLGtCQUFrQixDQUFDO2FBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDWCxRQUFRLENBQUMsd0NBQXdDLENBQUM7YUFHbEQsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUVSLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzthQUN4QixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsUUFBUSxDQUFDLDBCQUEwQixDQUFDO2FBQ3BDLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDWCxRQUFRLENBQUMsNEJBQTRCLENBQUMsQ0FDeEM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBUyxLQUFLO1FBQ2pDLEtBQUs7YUFFRixFQUFFLENBQUMsTUFBTSxDQUFDO2FBQ1YsRUFBRSxDQUFDLGNBQWMsQ0FBQzthQUNsQixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBRVIsRUFBRSxDQUFDLGFBQWEsQ0FBQzthQUNqQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNWLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQzthQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ1gsUUFBUSxDQUFDLHVCQUF1QixDQUFDO2FBQ2pDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzthQUNyQixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsUUFBUSxDQUFDLDhCQUE4QixDQUFDO2FBQ3hDLEVBQUUsQ0FBQyxhQUFhLENBQUM7YUFDakIsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNQLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQzthQUNwQyxLQUFLLENBQUMsT0FBTyxDQUFDO2FBQ2QsS0FBSyxDQUFDLGlEQUFpRCxDQUFDO2FBRXhELEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQzthQUMzQixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsUUFBUSxDQUFDLGdEQUFnRCxDQUFDO2FBRTFELEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQzthQUN2QixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNWLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQzthQUN6QyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ1gsUUFBUSxDQUFDLDJCQUEyQixDQUFDO2FBRXJDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzthQUN6QixLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ1IsUUFBUSxDQUFDLGtDQUFrQyxDQUFDO2FBQzVDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ1YsUUFBUSxDQUFDLGlDQUFpQyxDQUFDLENBQzdDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQVMsS0FBSztRQUMvQixLQUFLO2FBRUYsRUFBRSxDQUFDLE1BQU0sQ0FBQzthQUNWLEVBQUUsQ0FBQyxjQUFjLENBQUM7YUFDbEIsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUVSLEVBQUUsQ0FBQyxXQUFXLENBQUM7YUFDZixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNWLFFBQVEsQ0FBQyxlQUFlLENBQUM7YUFDekIsS0FBSyxDQUFDLElBQUksQ0FBQzthQUNYLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQzthQUMvQixFQUFFLENBQUMsZUFBZSxDQUFDO2FBQ25CLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDUixRQUFRLENBQUMsNEJBQTRCLENBQUM7YUFDdEMsRUFBRSxDQUFDLFdBQVcsQ0FBQzthQUNmLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDUCxRQUFRLENBQUMsd0JBQXdCLENBQUM7YUFDbEMsS0FBSyxDQUFDLE9BQU8sQ0FBQzthQUNkLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQzthQUVwRCxFQUFFLENBQUMsbUJBQW1CLENBQUM7YUFDdkIsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNSLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FBQzthQUMxQyxLQUFLLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFDLENBQUM7YUFDakIsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQ3pDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2lzc3VlLTExOC10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQge3J1bGVzU3VpdGV9IGZyb20gJy4uL3NpbXVsYXRvcic7XG52YXIgc2VjcmV0cyA9IHJlcXVpcmUoJy4uLy4uL2F1dGgtc2VjcmV0cycpO1xuXG5ydWxlc1N1aXRlKFwiVHlwZVtdIHwgU2NhbGFyIC0gaXNzdWUgMTE4XCIsIGZ1bmN0aW9uKHRlc3QpIHtcbiAgdGVzdC5kYXRhYmFzZShzZWNyZXRzLkFQUCwgc2VjcmV0cy5TRUNSRVQpO1xuICB0ZXN0LnJ1bGVzKCdzYW1wbGVzL2lzc3VlLTExOCcpO1xuXG4gIHRlc3QoXCJTY2FsYXIgdGVzdHMuXCIsIGZ1bmN0aW9uKHJ1bGVzKSB7XG4gICAgcnVsZXNcbiAgICAgIC8vIC5kZWJ1ZygpXG4gICAgICAuYXMoJ21pa2UnKVxuICAgICAgLmF0KCcvcGF0aC9zY2FsYXInKVxuICAgICAgLndyaXRlKDEpXG4gICAgICAuc3VjY2VlZHMoXCJXcml0ZSB0byBzY2FsYXIuXCIpXG4gICAgICAud3JpdGUobnVsbClcbiAgICAgIC5zdWNjZWVkcyhcIkRlbGV0aW5nIHdob2xlIGl0ZW0gY2FuIGRlbGV0ZSBzY2FsYXIuXCIpXG5cbiAgICAgIC8vIE5lZWRlZCBmb3IgYWxsIHN1YnNlcXVlbnQgdGVzdHMgdG8gcGFzcy5cbiAgICAgIC53cml0ZSgxKVxuXG4gICAgICAuYXQoJy9wYXRoL3NjYWxhck9yTnVsbCcpXG4gICAgICAud3JpdGUoMSlcbiAgICAgIC5zdWNjZWVkcyhcIldyaXRlIHRvIHNjYWxhciBvciBudWxsLlwiKVxuICAgICAgLndyaXRlKG51bGwpXG4gICAgICAuc3VjY2VlZHMoXCJDYW4gZGVsZXRlIHNjYWxhciBvciBudWxsLlwiKVxuICAgIDtcbiAgfSk7XG5cbiAgdGVzdChcIkFycmF5IHRlc3RzLlwiLCBmdW5jdGlvbihydWxlcykge1xuICAgIHJ1bGVzXG4gICAgICAvLyAuZGVidWcoKVxuICAgICAgLmFzKCdtaWtlJylcbiAgICAgIC5hdCgnL3BhdGgvc2NhbGFyJylcbiAgICAgIC53cml0ZSgxKVxuXG4gICAgICAuYXQoJy9wYXRoL2FycmF5JylcbiAgICAgIC53cml0ZShbMV0pXG4gICAgICAuc3VjY2VlZHMoXCJXcml0ZSB0byBhcnJheS5cIilcbiAgICAgIC53cml0ZShudWxsKVxuICAgICAgLnN1Y2NlZWRzKFwiRGVsZXRpbmcgd2hvbGUgYXJyYXkuXCIpXG4gICAgICAuYXQoJy9wYXRoL2FycmF5Lzk5OScpXG4gICAgICAud3JpdGUoMSlcbiAgICAgIC5zdWNjZWVkcyhcIldyaXRlIHNpbmdsZSBlbnRyeSB0byBhcnJheS5cIilcbiAgICAgIC5hdCgnL3BhdGgvYXJyYXknKVxuICAgICAgLnB1c2goMilcbiAgICAgIC5zdWNjZWVkcyhcIlB1c2hlcyB2YWx1ZSBpbnRvIGFycmF5LlwiKVxuICAgICAgLndyaXRlKFwiYm9ndXNcIilcbiAgICAgIC5mYWlscyhcIlNob3VsZCBub3QgYmUgYWJsZSB0byB3cml0ZSBub24tYXJyYXkgdG8gYXJyYXkuXCIpXG5cbiAgICAgIC5hdCgnL3BhdGgvYXJyYXlPck51bGwvOTk5JylcbiAgICAgIC53cml0ZSgxKVxuICAgICAgLnN1Y2NlZWRzKFwiQ2FuIHdyaXRlIHNpbmdsZSBhcnJheSBlbnRyeSB0byBhcnJheSBvciBudWxsLlwiKVxuXG4gICAgICAuYXQoJy9wYXRoL2FycmF5T3JOdWxsJylcbiAgICAgIC53cml0ZShbMV0pXG4gICAgICAuc3VjY2VlZHMoXCJXcml0ZSBhcnJheSB0byBhcnJheSBvciBudWxsLlwiKVxuICAgICAgLndyaXRlKG51bGwpXG4gICAgICAuc3VjY2VlZHMoXCJDYW4gZGVsZXRlIGFycmF5IG9yIG51bGwuXCIpXG5cbiAgICAgIC5hdCgnL3BhdGgvYXJyYXlPclNjYWxhcicpXG4gICAgICAud3JpdGUoMSlcbiAgICAgIC5zdWNjZWVkcyhcIldyaXRlIHNjYWxhciB0byBhcnJheSBvciBzY2FsYXIuXCIpXG4gICAgICAud3JpdGUoWzFdKVxuICAgICAgLnN1Y2NlZWRzKFwiV3JpdGUgYXJyYXkgdG8gYXJyYXkgb3Igc2NhbGFyLlwiKVxuICAgIDtcbiAgfSk7XG5cbiAgdGVzdChcIk1hcCB0ZXN0cy5cIiwgZnVuY3Rpb24ocnVsZXMpIHtcbiAgICBydWxlc1xuICAgICAgLy8gLmRlYnVnKClcbiAgICAgIC5hcygnbWlrZScpXG4gICAgICAuYXQoJy9wYXRoL3NjYWxhcicpXG4gICAgICAud3JpdGUoMSlcblxuICAgICAgLmF0KCcvcGF0aC9tYXAnKVxuICAgICAgLndyaXRlKFsxXSlcbiAgICAgIC5zdWNjZWVkcyhcIldyaXRlIHRvIG1hcC5cIilcbiAgICAgIC53cml0ZShudWxsKVxuICAgICAgLnN1Y2NlZWRzKFwiRGVsZXRpbmcgd2hvbGUgbWFwLlwiKVxuICAgICAgLmF0KCcvcGF0aC9tYXAva2V5JylcbiAgICAgIC53cml0ZSgxKVxuICAgICAgLnN1Y2NlZWRzKFwiV3JpdGUgc2luZ2xlIGVudHJ5IHRvIG1hcC5cIilcbiAgICAgIC5hdCgnL3BhdGgvbWFwJylcbiAgICAgIC5wdXNoKDIpXG4gICAgICAuc3VjY2VlZHMoXCJQdXNoZXMgdmFsdWUgaW50byBtYXAuXCIpXG4gICAgICAud3JpdGUoXCJib2d1c1wiKVxuICAgICAgLmZhaWxzKFwiU2hvdWxkIG5vdCBiZSBhYmxlIHRvIHdyaXRlIG5vbi1tYXAgdG8gbWFwLlwiKVxuXG4gICAgICAuYXQoJy9wYXRoL21hcE9yU2NhbGFyJylcbiAgICAgIC53cml0ZSgxKVxuICAgICAgLnN1Y2NlZWRzKFwiV3JpdGUgc2NhbGFyIHRvIG1hcCBvciBzY2FsYXIuXCIpXG4gICAgICAud3JpdGUoe1wia2V5XCI6IDJ9KVxuICAgICAgLnN1Y2NlZWRzKFwiV3JpdGUgbWFwIHRvIG1hcCBvciBzY2FsYXIuXCIpXG4gICAgO1xuICB9KTtcbn0pO1xuIl19
