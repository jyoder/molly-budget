"use strict";
/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var fs = require('fs');
var util = require('./util');
var hasXMLHttpRequest = typeof global !== 'undefined' && global['XMLHttpRequest'] !== undefined;
function readJSONFile(path, fnFallback) {
    return readFile(path)
        .then(function (response) {
        return JSON.parse(response.content);
    })
        .catch(function (error) {
        if (error.code === 'ENOENT' && typeof fnFallback === 'function') {
            return fnFallback();
        }
        throw error;
    });
}
exports.readJSONFile = readJSONFile;
function writeJSONFile(path, data) {
    return writeFile(path, util.prettyJSON(data));
}
exports.writeJSONFile = writeJSONFile;
function readFile(path) {
    return hasXMLHttpRequest ? request('GET', path) : readFS(path);
}
exports.readFile = readFile;
function writeFile(path, data) {
    return hasXMLHttpRequest ? request('PUT', path, data) : writeFS(path, data);
}
exports.writeFile = writeFile;
function request(method, url, data) {
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.open(method, '/' + url);
        req.onload = function () {
            if (req.status === 200) {
                resolve({ content: req.response, url: url });
            }
            else {
                reject(new Error(url + " " + req.statusText));
            }
        };
        req.onerror = function () {
            reject(new Error(url + " Network Error"));
        };
        if (data) {
            req.setRequestHeader('Content-Type', 'text');
        }
        req.send(data);
    });
}
function readFS(path) {
    return new Promise(function (resolve, reject) {
        fs.readFile(path, { encoding: 'utf8' }, function (error, data) {
            if (error) {
                reject(error);
                return;
            }
            resolve({ url: path, content: data });
        });
    });
}
function writeFS(path, data) {
    return new Promise(function (resolve, reject) {
        fs.writeFile(path, data, { encoding: 'utf8' }, function (error) {
            if (error) {
                reject(error);
                return;
            }
            resolve({ url: path, content: "ok" });
        });
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsZ0JBQWdCLElBQVk7SUFDMUIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFLE1BQU07UUFDekMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLEVBQUUsVUFBUyxLQUFLLEVBQUUsSUFBSTtZQUN4RCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDZCxNQUFNLENBQUM7WUFDVCxDQUFDO1lBQ0QsT0FBTyxDQUFDLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELGlCQUFpQixJQUFZLEVBQUUsSUFBUztJQUN0QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtRQUN6QyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLEVBQUUsVUFBUyxLQUFLO1lBQ3pELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNkLE1BQU0sQ0FBQztZQUNULENBQUM7WUFDRCxPQUFPLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6ImZpbGUtaW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsJztcblxuY29uc3QgaGFzWE1MSHR0cFJlcXVlc3QgPVxuICB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiAoPGFueT4gZ2xvYmFsKVsnWE1MSHR0cFJlcXVlc3QnXSAhPT0gdW5kZWZpbmVkO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRGaWxlUmVzdWx0IHtcbiAgY29udGVudDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRKU09ORmlsZShwYXRoOiBzdHJpbmcsIGZuRmFsbGJhY2s/OiAoKSA9PiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICByZXR1cm4gcmVhZEZpbGUocGF0aClcbiAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZTogUmVhZEZpbGVSZXN1bHQpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3BvbnNlLmNvbnRlbnQpO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ0VOT0VOVCcgJiYgdHlwZW9mIGZuRmFsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuRmFsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVKU09ORmlsZShwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcbiAgcmV0dXJuIHdyaXRlRmlsZShwYXRoLCB1dGlsLnByZXR0eUpTT04oZGF0YSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUocGF0aDogc3RyaW5nKTogUHJvbWlzZTxSZWFkRmlsZVJlc3VsdD4ge1xuICByZXR1cm4gaGFzWE1MSHR0cFJlcXVlc3QgPyByZXF1ZXN0KCdHRVQnLCBwYXRoKSA6IHJlYWRGUyhwYXRoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmlsZShwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcbiAgcmV0dXJuIGhhc1hNTEh0dHBSZXF1ZXN0ID8gcmVxdWVzdCgnUFVUJywgcGF0aCwgZGF0YSkgOiB3cml0ZUZTKHBhdGgsIGRhdGEpO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgZGF0YT86IGFueSk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcS5vcGVuKG1ldGhvZCwgJy8nICsgdXJsKTtcblxuICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyZXEuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgcmVzb2x2ZSh7Y29udGVudDogcmVxLnJlc3BvbnNlLCB1cmw6IHVybH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcih1cmwgKyBcIiBcIiArIHJlcS5zdGF0dXNUZXh0KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKHVybCArIFwiIE5ldHdvcmsgRXJyb3JcIikpO1xuICAgIH07XG5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0Jyk7XG4gICAgfVxuXG4gICAgcmVxLnNlbmQoZGF0YSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWFkRlMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxSZWFkRmlsZVJlc3VsdD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnMucmVhZEZpbGUocGF0aCwge2VuY29kaW5nOiAndXRmOCd9LCBmdW5jdGlvbihlcnJvciwgZGF0YSkge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoe3VybDogcGF0aCwgY29udGVudDogZGF0YX0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGUyhwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8UmVhZEZpbGVSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZzLndyaXRlRmlsZShwYXRoLCBkYXRhLCB7ZW5jb2Rpbmc6ICd1dGY4J30sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSh7dXJsOiBwYXRoLCBjb250ZW50OiBcIm9rXCJ9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=
