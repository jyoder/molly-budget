path / {
    read() { false }
    write() { false }
}


type Transaction {
    id: String,
    amount: Number,
    occurredAt: String,
    category: Category
}

type Category extends String {
    validate() {
        return
            this === 'General' || 
            this === 'Outing' ||
            this === 'Car' ||
            this === 'Groceries';
    }
}

path /accounts/{userId}/transactions {
    read() { isCurrentUser(userId) }
}

path /accounts/{userId}/transactions/{transactionId} is Transaction {
    read() { isCurrentUser(userId) }
    write() { isCurrentUser(userId) && createOnly(this) }
}


type DailyBudget {
    id: String,
    amount: Number,
    createdAt: String
}

path /accounts/{userId}/dailyBudgets {
    read() { isCurrentUser(userId) }
}

path /accounts/{userId}/dailyBudgets/{dailyBudgetId} is DailyBudget {
    read() { isCurrentUser(userId) }
    write() { isCurrentUser(userId) && createOnly(this) }
}


isCurrentUser(userId) {
    return isSignedIn() && auth.uid === userId;
}

isSignedIn() {
    return auth !== null;
}

createOnly(value) {
    return prior(value) === null && value !== null;
}
